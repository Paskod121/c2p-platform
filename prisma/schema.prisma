// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// === AUTHENTICATION MODELS (NextAuth.js) ===

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?

  // Informations C2P sp√©cifiques
  country     String?
  bio         String?
  githubUrl   String?  @map("github_url")
  linkedinUrl String?  @map("linkedin_url")
  level       Level    @default(BEGINNER)
  role        Role     @default(STUDENT)
  joinedAt    DateTime @default(now()) @map("joined_at")
  lastActive  DateTime @default(now()) @map("last_active")

  // Relations
  accounts       Account[]
  sessions       Session[]
  courseProgress CourseProgress[]
  forumPosts     ForumPost[]
  forumReplies   ForumReply[]
  projects       Project[]
  userBadges     UserBadge[]
  notifications  Notification[]

  createdAt  DateTime     @default(now()) @map("created_at")
  updatedAt  DateTime     @updatedAt @map("updated_at")
  ForumTopic ForumTopic[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// === C2P BUSINESS MODELS ===

enum Role {
  STUDENT
  MENTOR
  MODERATOR
  ADMIN
}

enum Level {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum Technology {
  PYTHON
  JAVASCRIPT
  HTML_CSS
  GIT_GITHUB
  LINUX
  JAVA
  POWER_BI
  REACT
  NODE_JS
  DJANGO
  OTHER
}

// === FORMATIONS & COURSES ===

model Course {
  id           String     @id @default(cuid())
  title        String
  description  String     @db.Text
  technology   Technology
  level        Level      @default(BEGINNER)
  duration     Int? // en minutes
  imageUrl     String?    @map("image_url")
  thumbnailUrl String?    @map("thumbnail_url")
  isPublished  Boolean    @default(false) @map("is_published")
  order        Int        @default(0)

  // Relations
  lessons        Lesson[]
  courseProgress CourseProgress[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("courses")
}

model Lesson {
  id          String  @id @default(cuid())
  title       String
  description String? @db.Text
  content     String  @db.Text
  videoUrl    String? @map("video_url")
  order       Int
  duration    Int? // en minutes
  isPublished Boolean @default(false) @map("is_published")

  // Relations
  courseId String @map("course_id")
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  courseProgress CourseProgress[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("lessons")
}

model CourseProgress {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  courseId     String   @map("course_id")
  lessonId     String?  @map("lesson_id")
  completed    Boolean  @default(false)
  progress     Int      @default(0) // pourcentage 0-100
  timeSpent    Int      @default(0) @map("time_spent") // en minutes
  lastAccessed DateTime @default(now()) @map("last_accessed")

  // Relations
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lesson Lesson? @relation(fields: [lessonId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([userId, courseId, lessonId])
  @@map("course_progress")
}

// === FORUM COMMUNITY ===

model ForumCategory {
  id          String      @id @default(cuid())
  name        String
  description String?     @db.Text
  technology  Technology?
  color       String      @default("#7c3aed")
  icon        String      @default("üí¨")
  order       Int         @default(0)
  isActive    Boolean     @default(true) @map("is_active")

  // Relations
  topics ForumTopic[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("forum_categories")
}

model ForumTopic {
  id       String  @id @default(cuid())
  title    String
  content  String  @db.Text
  isPinned Boolean @default(false) @map("is_pinned")
  isLocked Boolean @default(false) @map("is_locked")
  views    Int     @default(0)
  votes    Int     @default(0)

  // Relations
  categoryId String        @map("category_id")
  category   ForumCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  authorId String @map("author_id")
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  replies ForumReply[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("forum_topics")
}

model ForumReply {
  id      String @id @default(cuid())
  content String @db.Text
  votes   Int    @default(0)

  // Relations  
  topicId String     @map("topic_id")
  topic   ForumTopic @relation(fields: [topicId], references: [id], onDelete: Cascade)

  authorId String @map("author_id")
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  // R√©ponse √† une autre r√©ponse (threading)
  parentId String?      @map("parent_id")
  parent   ForumReply?  @relation("ReplyToReply", fields: [parentId], references: [id], onDelete: Cascade)
  children ForumReply[] @relation("ReplyToReply")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("forum_replies")
}

model ForumPost {
  id       String @id @default(cuid())
  title    String
  content  String @db.Text
  category String

  authorId String @map("author_id")
  author   User   @relation(fields: [authorId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("forum_posts")
}

// === REPLAYS & VIDEOS ===

model Replay {
  id           String     @id @default(cuid())
  title        String
  description  String     @db.Text
  videoUrl     String     @map("video_url")
  thumbnailUrl String?    @map("thumbnail_url")
  duration     Int? // en minutes
  technology   Technology
  level        Level      @default(BEGINNER)
  tags         String[]   @default([])
  views        Int        @default(0)
  isPublished  Boolean    @default(false) @map("is_published")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("replays")
}

// === PROJECTS & PORTFOLIO ===

model Project {
  id          String     @id @default(cuid())
  title       String
  description String     @db.Text
  githubUrl   String?    @map("github_url")
  demoUrl     String?    @map("demo_url")
  imageUrl    String?    @map("image_url")
  technology  Technology
  level       Level      @default(BEGINNER)
  tags        String[]   @default([])
  likes       Int        @default(0)
  isPublic    Boolean    @default(true) @map("is_public")

  // Relations
  authorId String @map("author_id")
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("projects")
}

// === GAMIFICATION & BADGES ===

model Badge {
  id          String @id @default(cuid())
  name        String
  description String @db.Text
  imageUrl    String @map("image_url")
  criteria    String @db.Text // Crit√®res d'obtention
  color       String @default("#7c3aed")
  rarity      Rarity @default(COMMON)
  points      Int    @default(10)

  // Relations
  userBadges UserBadge[]

  createdAt DateTime @default(now()) @map("created_at")

  @@map("badges")
}

enum Rarity {
  COMMON
  UNCOMMON
  RARE
  EPIC
  LEGENDARY
}

model UserBadge {
  id String @id @default(cuid())

  // Relations
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  badgeId String @map("badge_id")
  badge   Badge  @relation(fields: [badgeId], references: [id], onDelete: Cascade)

  earnedAt DateTime @default(now()) @map("earned_at")

  @@unique([userId, badgeId])
  @@map("user_badges")
}

// === NOTIFICATIONS ===

model Notification {
  id      String           @id @default(cuid())
  title   String
  message String           @db.Text
  type    NotificationType
  isRead  Boolean          @default(false) @map("is_read")

  // Relations
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")

  @@map("notifications")
}

enum NotificationType {
  COURSE_COMPLETED
  BADGE_EARNED
  FORUM_REPLY
  NEW_COURSE
  ANNOUNCEMENT
  SYSTEM
}
